BEGIN FILE: FRAMER_MOTION_ANIMATIONS_FOR_BASE44

=== TENNIS TRACKER - FRAMER MOTION ANIMATION SPECIFICATIONS ===

CRITICAL: This file contains the EXACT Framer Motion animations that Base44 must implement to achieve the identical smooth, professional animations.

=== 1. CORE ANIMATION IMPORTS ===

import { motion, AnimatePresence, PanInfo } from "framer-motion"

=== 2. PAGE ENTRANCE ANIMATIONS ===

/* Main Page Container */
const pageVariants = {
  initial: { opacity: 0, y: 20 },
  animate: { 
    opacity: 1, 
    y: 0,
    transition: {
      duration: 0.6,
      ease: [0.25, 0.46, 0.45, 0.94]
    }
  },
  exit: { opacity: 0, y: -20 }
}

/* Usage */
<motion.div
  className="min-h-screen pb-20 sm:pb-40"
  variants={pageVariants}
  initial="initial"
  animate="animate"
  exit="exit"
>

=== 3. CARD ANIMATIONS ===

/* Card Entrance Animation */
const cardVariants = {
  hidden: { 
    opacity: 0, 
    y: 30,
    scale: 0.95
  },
  visible: { 
    opacity: 1, 
    y: 0,
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 30,
      duration: 0.5
    }
  },
  hover: {
    y: -2,
    scale: 1.02,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25
    }
  }
}

/* Usage */
<motion.div
  className="glass-card"
  variants={cardVariants}
  initial="hidden"
  animate="visible"
  whileHover="hover"
>

=== 4. STAGGERED LIST ANIMATIONS ===

/* Container for Staggered Children */
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.1
    }
  }
}

/* Individual List Item */
const itemVariants = {
  hidden: { 
    opacity: 0, 
    x: -20,
    scale: 0.95
  },
  visible: { 
    opacity: 1, 
    x: 0,
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 30
    }
  }
}

/* Usage */
<motion.div
  variants={containerVariants}
  initial="hidden"
  animate="visible"
>
  {items.map((item, index) => (
    <motion.div
      key={item.id}
      variants={itemVariants}
      className="glass-card"
    >
      {item.content}
    </motion.div>
  ))}
</motion.div>

=== 5. BUTTON ANIMATIONS ===

/* Button Hover and Press */
const buttonVariants = {
  rest: { 
    scale: 1,
    y: 0
  },
  hover: { 
    scale: 1.05,
    y: -1,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25
    }
  },
  tap: { 
    scale: 0.95,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 600,
      damping: 30
    }
  }
}

/* Usage */
<motion.button
  className="glass-button"
  variants={buttonVariants}
  initial="rest"
  whileHover="hover"
  whileTap="tap"
>

=== 6. MODAL ANIMATIONS ===

/* Modal Backdrop */
const backdropVariants = {
  hidden: { opacity: 0 },
  visible: { 
    opacity: 1,
    transition: {
      duration: 0.2
    }
  },
  exit: { 
    opacity: 0,
    transition: {
      duration: 0.2
    }
  }
}

/* Modal Content */
const modalVariants = {
  hidden: { 
    opacity: 0,
    scale: 0.8,
    y: 50
  },
  visible: { 
    opacity: 1,
    scale: 1,
    y: 0,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 30,
      duration: 0.3
    }
  },
  exit: { 
    opacity: 0,
    scale: 0.8,
    y: 50,
    transition: {
      duration: 0.2
    }
  }
}

/* Usage */
<AnimatePresence>
  {isOpen && (
    <motion.div
      className="fixed inset-0 z-50"
      variants={backdropVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      <motion.div
        className="glass-modal-content"
        variants={modalVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
      >
        {modalContent}
      </motion.div>
    </motion.div>
  )}
</AnimatePresence>

=== 7. SWIPE GESTURES ===

/* Mobile Swipe Support */
const handlePanEnd = (event: any, info: PanInfo) => {
  const threshold = 50
  const velocity = info.velocity.x
  
  if (Math.abs(info.offset.x) > threshold || Math.abs(velocity) > 500) {
    if (info.offset.x > 0 || velocity > 0) {
      // Swipe right - previous tab
      setActiveTab(prev => Math.max(0, prev - 1))
    } else {
      // Swipe left - next tab
      setActiveTab(prev => Math.min(tabs.length - 1, prev + 1))
    }
  }
}

/* Usage */
<motion.div
  className="px-2 sm:px-4"
  onPanEnd={handlePanEnd}
  drag="x"
  dragConstraints={{ left: 0, right: 0 }}
  dragElastic={0.1}
>

=== 8. LOADING ANIMATIONS ===

/* Spinner Animation */
const spinnerVariants = {
  animate: {
    rotate: 360,
    transition: {
      duration: 1,
      repeat: Infinity,
      ease: "linear"
    }
  }
}

/* Usage */
<motion.div
  className="w-4 h-4 border-2 border-white border-t-transparent rounded-full"
  variants={spinnerVariants}
  animate="animate"
>

/* Pulse Animation */
const pulseVariants = {
  animate: {
    scale: [1, 1.2, 1],
    opacity: [0.5, 1, 0.5],
    transition: {
      duration: 2,
      repeat: Infinity,
      ease: "easeInOut"
    }
  }
}

/* Usage */
<motion.div
  className="w-2 h-2 bg-yellow-400 rounded-full"
  variants={pulseVariants}
  animate="animate"
>

=== 9. STATUS TRANSITION ANIMATIONS ===

/* Status Button Transitions */
const statusVariants = {
  present: {
    backgroundColor: "rgba(16, 185, 129, 0.2)",
    borderColor: "rgba(16, 185, 129, 1)",
    color: "rgba(16, 185, 129, 0.8)",
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25
    }
  },
  absent: {
    backgroundColor: "rgba(239, 68, 68, 0.2)",
    borderColor: "rgba(239, 68, 68, 1)",
    color: "rgba(239, 68, 68, 0.8)",
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25
    }
  },
  default: {
    backgroundColor: "rgba(255, 255, 255, 0.1)",
    borderColor: "rgba(255, 255, 255, 0.15)",
    color: "#ffffff",
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25
    }
  }
}

/* Usage */
<motion.button
  className="glass-button"
  variants={statusVariants}
  animate={attendanceSelections[studentId] === "present" ? "present" : 
          attendanceSelections[studentId] === "absent" ? "absent" : "default"}
  whileHover={{ scale: 1.05 }}
  whileTap={{ scale: 0.95 }}
>

=== 10. EXPANDABLE CONTENT ANIMATIONS ===

/* Accordion Animation */
const accordionVariants = {
  closed: {
    height: 0,
    opacity: 0,
    transition: {
      height: {
        duration: 0.3,
        ease: "easeInOut"
      },
      opacity: {
        duration: 0.2,
        ease: "easeInOut"
      }
    }
  },
  open: {
    height: "auto",
    opacity: 1,
    transition: {
      height: {
        duration: 0.3,
        ease: "easeInOut"
      },
      opacity: {
        duration: 0.2,
        delay: 0.1,
        ease: "easeInOut"
      }
    }
  }
}

/* Usage */
<AnimatePresence>
  {isExpanded && (
    <motion.div
      variants={accordionVariants}
      initial="closed"
      animate="open"
      exit="closed"
      className="overflow-hidden"
    >
      {expandedContent}
    </motion.div>
  )}
</AnimatePresence>

=== 11. ICON ANIMATIONS ===

/* Icon Rotation */
const iconVariants = {
  rest: { rotate: 0 },
  hover: { 
    rotate: 180,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 20
    }
  }
}

/* Usage */
<motion.div
  variants={iconVariants}
  initial="rest"
  whileHover="hover"
>
  <ChevronDown className="h-4 w-4" />
</motion.div>

=== 12. NOTIFICATION ANIMATIONS ===

/* Toast Notification */
const toastVariants = {
  hidden: {
    opacity: 0,
    y: -50,
    scale: 0.8
  },
  visible: {
    opacity: 1,
    y: 0,
    scale: 1,
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 30
    }
  },
  exit: {
    opacity: 0,
    y: -50,
    scale: 0.8,
    transition: {
      duration: 0.2
    }
  }
}

/* Usage */
<AnimatePresence>
  {toast && (
    <motion.div
      className="fixed top-4 right-4 z-50 glass-card"
      variants={toastVariants}
      initial="hidden"
      animate="visible"
      exit="exit"
    >
      {toast.message}
    </motion.div>
  )}
</AnimatePresence>

=== 13. SEARCH ANIMATIONS ===

/* Search Input Focus */
const searchVariants = {
  unfocused: {
    scale: 1,
    borderColor: "rgba(255, 255, 255, 0.08)"
  },
  focused: {
    scale: 1.02,
    borderColor: "rgba(255, 255, 255, 0.15)",
    transition: {
      type: "spring",
      stiffness: 400,
      damping: 25
    }
  }
}

/* Usage */
<motion.input
  className="glass-input"
  variants={searchVariants}
  initial="unfocused"
  animate={isFocused ? "focused" : "unfocused"}
  onFocus={() => setIsFocused(true)}
  onBlur={() => setIsFocused(false)}
>

=== 14. PERFORMANCE OPTIMIZATIONS ===

/* Optimized Motion Components */
const OptimizedMotion = ({ children, className }: { children: React.ReactNode; className?: string }) => {
  return (
    <motion.div
      className={className}
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{
        type: "spring",
        stiffness: 300,
        damping: 30
      }}
      layout
    >
      {children}
    </motion.div>
  )
}

/* Layout Animations */
const LayoutMotion = ({ children, className }: { children: React.ReactNode; className?: string }) => {
  return (
    <motion.div
      layout
      transition={{
        type: "spring",
        stiffness: 300,
        damping: 30
      }}
      className={className}
    >
      {children}
    </motion.div>
  )
}

=== 15. GESTURE HANDLING ===

/* Drag Constraints */
const dragConstraints = {
  left: -100,
  right: 100,
  top: -50,
  bottom: 50
}

/* Drag Handlers */
const handleDragStart = () => {
  console.log("Drag started")
}

const handleDrag = (event: any, info: any) => {
  // Handle drag progress
}

const handleDragEnd = (event: any, info: any) => {
  // Handle drag end
}

/* Usage */
<motion.div
  drag
  dragConstraints={dragConstraints}
  onDragStart={handleDragStart}
  onDrag={handleDrag}
  onDragEnd={handleDragEnd}
  dragElastic={0.1}
  dragMomentum={false}
>

=== 16. ANIMATION PRESETS ===

/* Common Animation Presets */
export const animationPresets = {
  fadeInUp: {
    initial: { opacity: 0, y: 30 },
    animate: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -30 },
    transition: { duration: 0.5, ease: "easeOut" }
  },
  
  slideInRight: {
    initial: { opacity: 0, x: 30 },
    animate: { opacity: 1, x: 0 },
    exit: { opacity: 0, x: -30 },
    transition: { duration: 0.4, ease: "easeOut" }
  },
  
  scaleIn: {
    initial: { opacity: 0, scale: 0.8 },
    animate: { opacity: 1, scale: 1 },
    exit: { opacity: 0, scale: 0.8 },
    transition: { duration: 0.3, ease: "easeOut" }
  },
  
  springIn: {
    initial: { opacity: 0, scale: 0.9, y: 20 },
    animate: { opacity: 1, scale: 1, y: 0 },
    exit: { opacity: 0, scale: 0.9, y: -20 },
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 30
    }
  }
}

/* Usage */
<motion.div
  {...animationPresets.springIn}
  initial="initial"
  animate="animate"
  exit="exit"
>

=== 17. REDUCED MOTION SUPPORT ===

/* Respect User Preferences */
const shouldReduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches

const getAnimationProps = () => {
  if (shouldReduceMotion) {
    return {
      initial: { opacity: 0 },
      animate: { opacity: 1 },
      exit: { opacity: 0 },
      transition: { duration: 0.1 }
    }
  }
  
  return {
    initial: { opacity: 0, y: 20 },
    animate: { opacity: 1, y: 0 },
    exit: { opacity: 0, y: -20 },
    transition: {
      type: "spring",
      stiffness: 300,
      damping: 30
    }
  }
}

/* Usage */
<motion.div {...getAnimationProps()}>

=== 18. COMPLEX ANIMATION SEQUENCES ===

/* Multi-step Animation */
const complexSequence = {
  initial: { opacity: 0, scale: 0.8, rotate: -10 },
  animate: {
    opacity: 1,
    scale: 1,
    rotate: 0,
    transition: {
      duration: 0.6,
      ease: "easeOut",
      times: [0, 0.5, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.8,
    rotate: 10,
    transition: {
      duration: 0.3,
      ease: "easeIn"
    }
  }
}

/* Usage */
<motion.div
  variants={complexSequence}
  initial="initial"
  animate="animate"
  exit="exit"
>

=== 19. ANIMATION UTILITIES ===

/* Animation Helper Functions */
export const createStaggerAnimation = (delay: number = 0.1) => ({
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: delay
    }
  }
})

export const createItemAnimation = (direction: 'up' | 'down' | 'left' | 'right' = 'up') => {
  const directions = {
    up: { y: 20 },
    down: { y: -20 },
    left: { x: 20 },
    right: { x: -20 }
  }
  
  return {
    hidden: { 
      opacity: 0, 
      ...directions[direction]
    },
    visible: { 
      opacity: 1, 
      x: 0,
      y: 0,
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 30
      }
    }
  }
}

=== 20. IMPLEMENTATION CHECKLIST ===

CRITICAL: Base44 must implement ALL of these animations:

✓ Page entrance animations with fadeInUp
✓ Card hover and press animations
✓ Staggered list animations
✓ Button hover and tap animations
✓ Modal backdrop and content animations
✓ Swipe gesture support for mobile
✓ Loading spinner and pulse animations
✓ Status transition animations
✓ Expandable content accordion animations
✓ Icon rotation animations
✓ Toast notification animations
✓ Search input focus animations
✓ Performance optimizations
✓ Gesture handling
✓ Animation presets
✓ Reduced motion support
✓ Complex animation sequences
✓ Animation utilities

The app must have the EXACT same smooth, professional animations as the original Tennis Tracker.

END FILE: FRAMER_MOTION_ANIMATIONS_FOR_BASE44
